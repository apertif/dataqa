# Module to merge preflag plots

import os
import numpy as np
#import pymp
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import socket
import glob
import logging

logger = logging.getLogger(__name__)


def combine_preflag_plots(qa_preflag_dir, trigger_mode=False):
    """
    Function to combine the plots generated by preflag

    Args:
        qa_dir (str): Directory of the qa
        trigger_mode (bool): For running this function as part of the automated dataQA

    Returns
        (int) 1 or -1 if it was successfull or if it aborted
    """

    logging.info("Combining preflag plots")

    # General set up
    # ==============

    # set the list of preflag directories to search
    if socket.gethostname() != 'happili-01' or trigger_mode:
        qa_preflag_dir_list = [qa_preflag_dir]
    else:
        qa_preflag_dir_list = [qa_preflag_dir, qa_preflag_dir.replace(
            "data", "data2"), qa_preflag_dir.replace("data", "data3"), qa_preflag_dir.replace("data", "data4")]

    # get a list of beam directories
    qa_preflag_beam_dir_list = np.array([
        glob.glob(os.path.join(preflag_dir, "[0-3][0-9]")) for preflag_dir in qa_preflag_dir_list])

    # combine the beam directory arrays arrays
    qa_preflag_beam_dir_list = np.concatenate(qa_preflag_beam_dir_list)

    if len(qa_preflag_beam_dir_list) == 0:
        logging.warning("No beam directories found. Abort")
        return -1
    else:
        qa_preflag_beam_dir_list.sort()

    # get a list of beams
    beam_list = np.array([os.path.basename(beam_dir)
                          for beam_dir in qa_preflag_beam_dir_list])

    # get a list of pngs:
    qa_preflag_beam_png_list = np.array([glob.glob(os.path.join(
        beam_dir, "*.png")) for beam_dir in qa_preflag_beam_dir_list])

    # combine the list
    qa_preflag_beam_png_list = np.concatenate(qa_preflag_beam_png_list)

    if len(qa_preflag_beam_png_list) == 0:
        logging.warning("No images found. Abort.")
        return -1
    else:
        qa_preflag_beam_png_list.sort()

    # get a list of unique png names
    png_name_full_list = np.array([os.path.basename(png_name)
                                   for png_name in qa_preflag_beam_png_list])

    png_name_unique_list = np.unique(png_name_full_list)

    #logging.info("Following plots were found {}".format(str(png_name_unique_list)))

    # Going through the different pngs and combine them
    # =================================================
    for png_name in png_name_unique_list:

        # get the source name
        src_name = png_name.split("_")[0]

        # name of new image
        output_image_name = os.path.join(
            qa_preflag_dir, png_name.replace(".png", "_combined.png"))

        logging.info("Creating {}".format(output_image_name))

        # get a list of indices which correspond to this png
        png_indices = np.where(png_name_full_list == png_name)[0]

        # number of pngs
        n_png = np.size(png_indices)

        # get a list of png files for the given type of png
        png_path_list = qa_preflag_beam_png_list[png_indices]

        # get a list of beams for this type of png
        beam_png_list = np.array(
            [os.path.basename(os.path.dirname(png_path)) for png_path in png_path_list])

        # setting up the plot
        nx = 8
        ny = 5
        xsize = nx*4
        ysize = ny*4
        plt.figure(figsize=(xsize, ysize))
        plt.suptitle(
            '{0}'.format(png_name.split(".png")[0]), size=30)

        # go through the list of png
        for k in range(n_png):
            beam_nr = int(beam_png_list[k])
            ax = plt.subplot(nx, ny, int(beam_png_list[k])+1)
            plt_img = plt.imread(png_path_list[k])
            ax.imshow(plt_img)
            plt.title('{0}'.format(beam_nr))
            ax.axis('tight')
            ax.axis('off')
            ax.set_aspect("equal")

        #plt.subplots_adjust(left=0.0, right=1.0, bottom=0.0, top=1.0)
        # need to use negative space to move plots together
        plt.subplots_adjust(wspace=-0.8, hspace=0.4)
        plt.savefig(output_image_name, overwrite=True,
                    bbox_inches='tight', dpi=200)
        plt.close("all")

    logging.info("Combining preflag plots ... Done")

    return 1
